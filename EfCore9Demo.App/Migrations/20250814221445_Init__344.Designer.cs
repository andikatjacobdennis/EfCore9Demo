// <auto-generated />
using System;
using EfCore9Demo.App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCore9Demo.App.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814221445_Init__344")]
    partial class Init__344
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfCore9Demo.App.models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            CreatedAt = new DateTime(2025, 8, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerEmail = "john@example.com",
                            OwnerName = "John Doe",
                            Title = "Tech Insights",
                            Url = "https://example.com"
                        });
                });

            modelBuilder.Entity("EfCore9Demo.App.models.BlogDetail", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.ToTable("BlogDetails");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            Description = "A blog about cutting-edge tech.",
                            LastUpdated = new DateTime(2025, 8, 15, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EfCore9Demo.App.models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            AuthorEmail = "alice@example.com",
                            AuthorName = "Alice",
                            CreatedAt = new DateTime(2025, 8, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            Status = 1,
                            Text = "Nice article!"
                        },
                        new
                        {
                            CommentId = 2,
                            AuthorEmail = "bob@example.com",
                            AuthorName = "Bob",
                            CreatedAt = new DateTime(2025, 8, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            Status = 1,
                            Text = "Very informative, thanks!"
                        },
                        new
                        {
                            CommentId = 3,
                            AuthorEmail = "charlie@example.com",
                            AuthorName = "Charlie",
                            CreatedAt = new DateTime(2025, 8, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            Status = 0,
                            Text = "Looking forward to trying these out!"
                        });
                });

            modelBuilder.Entity("EfCore9Demo.App.models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<double>("ReadTimeMinutes")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            BlogId = 1,
                            Content = "This is a post introducing EF Core 9.",
                            IsPublished = true,
                            PublishedAt = new DateTime(2025, 8, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4.5m,
                            ReadTimeMinutes = 5.2000000000000002,
                            Title = "Hello EF Core 9"
                        },
                        new
                        {
                            PostId = 2,
                            BlogId = 1,
                            Content = "A deep dive into EF Core 9's new LINQ capabilities.",
                            IsPublished = true,
                            PublishedAt = new DateTime(2025, 8, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5.0m,
                            ReadTimeMinutes = 8.6999999999999993,
                            Title = "Advanced EF Core 9 Queries"
                        });
                });

            modelBuilder.Entity("EfCore9Demo.App.models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Name = "EFCore"
                        },
                        new
                        {
                            TagId = 2,
                            Name = "CSharp"
                        });
                });

            modelBuilder.Entity("PostTags", b =>
                {
                    b.Property<int>("PostsPostId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("PostsPostId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostsPostId = 1,
                            TagsTagId = 1
                        },
                        new
                        {
                            PostsPostId = 1,
                            TagsTagId = 2
                        },
                        new
                        {
                            PostsPostId = 2,
                            TagsTagId = 1
                        });
                });

            modelBuilder.Entity("EfCore9Demo.App.models.BlogDetail", b =>
                {
                    b.HasOne("EfCore9Demo.App.models.Blog", "Blog")
                        .WithOne("BlogDetail")
                        .HasForeignKey("EfCore9Demo.App.models.BlogDetail", "BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("EfCore9Demo.App.models.Comment", b =>
                {
                    b.HasOne("EfCore9Demo.App.models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EfCore9Demo.App.models.Post", b =>
                {
                    b.HasOne("EfCore9Demo.App.models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("PostTags", b =>
                {
                    b.HasOne("EfCore9Demo.App.models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCore9Demo.App.models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EfCore9Demo.App.models.Blog", b =>
                {
                    b.Navigation("BlogDetail")
                        .IsRequired();

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("EfCore9Demo.App.models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
